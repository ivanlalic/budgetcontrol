{"version":3,"sources":["components/error.jsx","components/question.js","components/form.jsx","components/expense.jsx","components/list.jsx","helpers.js","components/BudgetControl.jsx","App.js","serviceWorker.js","index.js"],"names":["Error","message","className","Question","setBudget","setRemaining","setAskBudget","useState","amount","setAmount","error","setError","onSubmit","e","preventDefault","isNaN","type","placeholder","onChange","parseInt","target","value","Form","setExpense","setCreateexpense","name","setName","trim","expense","id","shortid","generate","Expense","List","expenses","map","key","checkBudget","budget","remaining","BudgetControl","App","askbudget","setExpenses","createexpense","useEffect","remainingBudget","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.d32832a9.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Error = ({message}) => (\r\n    <p className=\"alert alert-danger error\">{message}</p>\r\n);\r\n \r\nError.propTypes = {\r\n    message: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Error;","import React, {Fragment, useState } from 'react';\r\nimport Error from './error';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Question = ({setBudget, setRemaining, setAskBudget}) => {\r\n\r\n    //useState\r\n    const [amount, setAmount] = useState(0);\r\n    const [error, setError] = useState(false); // No error at start\r\n\r\n    //Read budget and set it\r\n    const defineBudget = e => {           \r\n        setAmount(parseInt(e.target.value))\r\n    }\r\n\r\n    // Function submit budget\r\n    const addBudget = e => {\r\n        e.preventDefault();\r\n\r\n    //Validate\r\n        if (amount < 1 || isNaN(amount)) { //Bigger than 1 or shouldn't be NaN\r\n            setError(true);\r\n            return;\r\n        }\r\n\r\n\r\n    //Afert validate\r\n        setError(false);\r\n        setBudget(amount);\r\n        setRemaining(amount);\r\n        setAskBudget(false); //seria que cuando se valide un presupuesto, setAskBudget pasa a false\r\n    }\r\n\r\n\r\n    return (  \r\n        <Fragment>\r\n            <h2>Add your budget</h2>\r\n\r\n            { error ? <Error message=\"Budget requiered\" /> : null}\r\n\r\n            <form\r\n                onSubmit={addBudget}\r\n            >\r\n                <input \r\n                    type=\"number\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Type your budget\"\r\n                    onChange={defineBudget}\r\n                />\r\n                <input \r\n                    type=\"submit\"\r\n                    className=\"button-primary u-full-width\"\r\n                    value=\"Set Budget\"\r\n                />\r\n            </form>\r\n        </Fragment>\r\n\r\n    );\r\n}\r\n \r\nQuestion.propTypes = {\r\n    setBudget: PropTypes.func.isRequired,\r\n    setRemaining: PropTypes.func.isRequired,\r\n    setAskBudget: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Question;","import React, {useState} from 'react'\r\nimport Error from './error';\r\nimport shortid from 'shortid';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Form = ({setExpense, setCreateexpense}) => {\r\n\r\n    //useState\r\n    const [name, setName] = useState('');\r\n    const [amount, setAmount] = useState(0);\r\n    const [error, setError] = useState(false);\r\n\r\n\r\n\r\n\r\n    // When user add an expense\r\n    const addExpense = e => {\r\n        e.preventDefault();\r\n\r\n        //Validate\r\n        if (amount < 1 || isNaN(amount) || name.trim() === '') {\r\n            setError(true)\r\n            return;\r\n        }\r\n        setError(false);\r\n\r\n\r\n        //Build expense\r\n        const expense = {\r\n            name,\r\n            amount,\r\n            id: shortid.generate()\r\n        }\r\n        \r\n        //Pass expense to app.js\r\n        setExpense(expense);\r\n        setCreateexpense(true); //After expense created, set it to true\r\n        \r\n        //form reset\r\n        setName('');\r\n        setAmount(0);\r\n\r\n    }\r\n\r\n\r\n\r\n    return ( \r\n        <form\r\n            onSubmit={addExpense}\r\n        >\r\n            <h2>Add your expenses</h2>\r\n\r\n            {error ? <Error message=\"Add an expense and a value\" /> : null}\r\n\r\n            <div className=\"campo\">\r\n                <label>Expense</label>\r\n                <input\r\n                    type=\"text\" \r\n                    className=\"u-full-width\" \r\n                    placeholder=\"Commute\"\r\n                    value={name}\r\n                    onChange={e => setName(e.target.value)}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"campo\">\r\n                <label>Amount</label>\r\n                <input\r\n                    type=\"number\" \r\n                    className=\"u-full-width\" \r\n                    placeholder=\"$300\"\r\n                    value={amount}\r\n                    onChange={e => setAmount(parseInt(e.target.value))}\r\n                />\r\n            </div>\r\n\r\n            <input \r\n            type=\"submit\"\r\n            className=\"button-primary u-full-width\"\r\n            value=\"Add Expense\"\r\n            />\r\n            \r\n        </form>\r\n     );\r\n}\r\n \r\nForm.propTypes = {\r\n    setExpense: PropTypes.func.isRequired,\r\n    setCreateexpense: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Form;","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Expense = ({expense}) => (\r\n    <li className=\"gastos\">\r\n        <p>\r\n            {expense.name}\r\n            <span className=\"gasto\">${expense.amount}</span>\r\n        </p>\r\n    </li>\r\n);\r\n \r\nExpense.propTypes = {\r\n    expense: PropTypes.object.isRequired\r\n}\r\nexport default Expense;","import React from 'react';\r\nimport Expense from './expense';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst List = ({expenses}) => (\r\n    <div className=\"gastos-realizados\">\r\n        <h2>List of Expenses</h2>\r\n        {expenses.map(expense => (\r\n            <Expense \r\n                key={expense.id}\r\n                expense={expense}\r\n            />\r\n        ))}\r\n    </div>\r\n);\r\n \r\nList.propTypes = {\r\n    expenses: PropTypes.array.isRequired\r\n}\r\n\r\nexport default List;\r\n\r\n\r\n","export const checkBudget = (budget, remaining) => {\r\n    let clase;\r\n\r\n    if ( (budget / 4) > remaining ) {\r\n        clase = \"alert alert-danger\";\r\n    } else if ( (budget / 2) > remaining ) {\r\n        clase = \"alert alert-warning\";\r\n    } else {\r\n        clase = \"alert alert-success\";\r\n    }\r\n\r\n    return clase;\r\n};","import React, {Fragment} from 'react'\r\nimport {checkBudget} from '../helpers';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst BudgetControl = ({budget, remaining}) => {\r\n    return ( \r\n        <Fragment>\r\n            <div className=\"alert alert-primary\">\r\n                Budget: $ {budget}\r\n            </div>\r\n\r\n            <div className={checkBudget(budget, remaining)}>\r\n                Remaining: $ {remaining}\r\n            </div>\r\n\r\n        </Fragment>\r\n\r\n\r\n     );\r\n}\r\n\r\nBudgetControl.propTypes = {\r\n    budget: PropTypes.number.isRequired,\r\n    remaining: PropTypes.number.isRequired\r\n}\r\n \r\nexport default BudgetControl;","import React, {useState, useEffect} from 'react';\nimport Question from './components/question';\nimport Form from './components/form';\nimport List from './components/list';\nimport BudgetControl from './components/BudgetControl';\n\n\nfunction App() {\n\n  //Define useState\n  const [budget, setBudget] = useState(0);\n  const [remaining, setRemaining] = useState(0);\n  const [askbudget, setAskBudget] = useState(true);\n  const [expenses, setExpenses] = useState([]);\n  const [expense, setExpense] = useState({});\n  const [createexpense, setCreateexpense] =useState(false);\n\n  //UseEffect updates remaining\n  useEffect(()=> {\n    \n    if (createexpense) {\n      setExpenses([\n        ...expenses,\n        expense\n      ]);\n\n      //Get remaining budget\n      const remainingBudget = remaining - expense.amount;\n      setRemaining(remainingBudget);\n \n      //After it was executed , make it false again\n      setCreateexpense(false); \n    }\n  }, [createexpense, expense, expenses, remaining]);\n\n\n\n  return (\n    <div className=\"container\">\n      <header>\n        <h1>Budget Control</h1>\n\n        <div className=\"contenido-principal contenido\">\n          {askbudget ? \n          (              //Ternario para que se muestre la pregunta del budget si o no\n            <Question                 // Pongo () para que sea un return;\n              setBudget={setBudget}\n              setRemaining={setRemaining}\n              setAskBudget={setAskBudget}\n            />\n          ) : \n          (\n            <div className=\"row\">\n            <div className=\"one-half column\">\n              <Form \n                setExpense={setExpense}\n                setCreateexpense={setCreateexpense}\n              />\n            </div>\n\n            <div className=\"one-half column\">\n              <List \n                expenses={expenses}\n              />\n\n              <BudgetControl \n                 budget={budget}\n                 remaining={remaining}\n              />\n            \n            </div>\n          </div>\n          )\n          }\n\n        </div>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}